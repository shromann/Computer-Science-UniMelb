============================================
vis/output.txt
23:54:47_Tuesday_28_April_2020
============================================

Compiling a1 using Makefile
$ make clean
rm *.o
$ make
gcc -Wall -Wno-comment -c main.c
gcc -Wall -Wno-comment -c deque.c
gcc -Wall -Wno-comment -c parkranger.c
gcc -Wall -Wno-comment -c util.c
gcc -Wall -Wno-comment -o a1 main.o deque.o parkranger.o util.o


Compilation Successful


Testing Problem 2 (a)
===
Problem 2 (a) test 1: correct
Problem 2 (a) test 2: correct
Problem 2 (a) test 3: correct

Testing Problem 2 (b)
===
Problem 2 (b) test 1: correct
Problem 2 (b) test 2: correct
Problem 2 (b) test 3: correct

Testing Problem 2 (c)
===
Problem 2 (c) test 1: correct
Problem 2 (c) test 2: correct
Problem 2 (c) test 3: correct

Testing Problem 3 (a)
===
Problem 3 (a) test 1: correct
Problem 3 (a) test 2: correct
Problem 3 (a) test 3: correct
Problem 3 (a) test 4: correct
Problem 3 (a) test 5: correct
Problem 3 (a) test 6: correct

Results
===
Problem 2 (a): 3 tests passed (1.0/1.0)
Problem 2 (b): 3 tests passed (1.0/1.0)
Problem 2 (c): 3 tests passed (1.0/1.0)
Problem 3 (a): 6 tests passed (2.0/2.0)
Overall: 5.0 marks out of an available 5.0

============================================
src/parkranger.h
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Park Ranger module for Assignment 1
 *
 * created for COMP20007 Design of Algorithms 2020
 * template by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * implementation by <Shromann Majumder>
 */

#ifndef PARKRANGER_H
#define PARKRANGER_H

#include <stdbool.h>

// This function must read in a ski slope map and determine whether or not
// it is possible for the park ranger to trim all of the trees on the ski slope
// in a single run starting from the top of the mountain.
//
// The ski slope map is provided via stdin in the following format:
//
//   n m
//   from to
//   from to
//   ...
//   from to
//
// Here n denotes the number of trees that need trimming, which are labelled
// {1, ..., n}. The integer m denotes the number "reachable pairs" of trees.
// There are exactly m lines which follow, each containing a (from, to) pair
// which indicates that tree `to` is directly reachable from tree `from`.
// `from` and `to` are integers in the range {0, ..., n}, where {1, ..., n}
// denote the trees and 0 denotes the top of the mountain.
//
// For example the following input represents a ski slope with 3 trees and
// 4 reachable pairs of trees.
//
// input:            map:          0
//   3 4                          / \
//   0 1                         /  1
//   0 2                        / /
//   1 2                        2
//   2 3                          \
//                                 3
//
// In this example your program should return `true` as there is a way to trim
// all trees in a single run. This run is (0, 1, 2, 3).
//
// Your function should must:
//  - Read in this data from stdin
//  - Store this data in an appropriate data structure
//  - Run the algorithm you have designed to solve this problem
//  - Do any clean up required (e.g., free allocated memory)
//  - Return `true` or `false` (included in the stdbool.h library)
//
// For full marks your algorithm must run in O(n + m) time.
bool is_single_run_possible();

// TODO: Add any additional functions or types required to solve this problem.
typedef struct node node_t; 
typedef struct graph graph_t;

int get_values(int *n, int *m);
node_t* create_node(int v);
graph_t* create_graph(int vertices);
void append(graph_t *graph, int u, int v);
int* create_list(int size);
int* FindPath(graph_t* graph);
int dfsFindPath(graph_t* graph, int v, int* visited_list, int* path, int n);
bool isSinglePath(graph_t* graph, int* path);


#endif
============================================
src/main.c
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Main program for Assignment 1
 *
 * created for COMP20007 Design of Algorithms 2020
 * by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 */

// DO NOT CHANGE THIS FILE

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "deque.h"
#include "parkranger.h"
#include "util.h"

// We expect the command to have the form: PROG -OPT
#define EXPECTED_OPTS 2

// Command line argument options
#define OPT_ITERATIVE  1
#define OPT_RECURSIVE  2
#define OPT_SPLIT      3
#define OPT_PARKRANGER 4

// Prints out the usage instructions and valid command line arguments for this
// program.
void print_usage(char *prog_name);

// Returns the command line option given to this program.
//
// If there are too many (> 1) or not enough (0) command line arguments
// provided an error is printed, along with the usage of the program.
int get_option(int argc, char **argv);

// Read integers from stdin, one per line, into a Deque and then return this
// Deque. Integers are inserted at the bottom of the Deque so tha the first
// integer read is the top of the Deque and the final element is the bottom of
// the Deque.
Deque *read_deque();

// Test a Deque reverse function by reading integers from stdin into a Deque,
// reversing the Deque using the specified function and printing the contents.
// The Deque is freed before this function returns.
void test_reverse(void (*reverse)(Deque *));

// Test the split_deque function by reading the critical value k from stdin
// followed by some number of integers (possibly none). These integers are
// inserted at the bottom of the deque, and then split_deque is called. The
// Deque is then printed and freed.
void test_split();

// Test the is_single_run_possible() function from the parkranger module.
// This function doesn't read anything from stdin, as this is handled by the
// function we are testing. This function will print one of the two options:
//   the trees on the ski slope CAN be trimmed in one run
// or,
//   the trees on the ski slope CANNOT be trimmed in one run
void test_parkranger();

int main(int argc, char **argv) {
  int opt = get_option(argc, argv);

  if (opt == OPT_ITERATIVE) {
    test_reverse(iterative_reverse);
  } else if (opt == OPT_RECURSIVE) {
    test_reverse(recursive_reverse);
  } else if (opt == OPT_SPLIT) {
    test_split();
  } else if (opt == OPT_PARKRANGER) {
    test_parkranger();
  }

  return 0;
}

// Prints out the usage instructions and valid command line arguments for this
// program.
void print_usage(char *prog_name) {
  printf("usage: %s [option] < <input_file>\n", prog_name);
  printf("\n");
  printf("options:\n");
  printf("\tp2a \tTest the Deque iterative_reverse() function\n");
  printf("\tp2b \tTest the Deque recursive_reverse() function\n");
  printf("\tp2c \tTest the Deque split() function\n");
  printf("\tp3a \tTest the is_single_run_possible() function\n");
}

// Returns the command line option given to this program.
//
// If there are too many (> 1) or not enough (0) command line arguments
// provided an error is printed, along with the usage of the program.
int get_option(int argc, char **argv) {
  char *opt;

  // Confirm that there are the correct number of command line arguments
  if (argc < EXPECTED_OPTS) {
    print_usage(argv[0]);
    exit(EXIT_SUCCESS);
  } else if (argc > EXPECTED_OPTS) {
    fprintf(stderr, "error: expected exactly one command line argument\n");
    print_usage(argv[0]);
    exit(EXIT_FAILURE);
  }

  // Use strcmp to determine whether a valid command line option was provided
  opt = argv[1];
  if (strcmp(opt, "p2a") == 0) {
    return OPT_ITERATIVE;
  } else if (strcmp(opt, "p2b") == 0) {
    return OPT_RECURSIVE;
  } else if (strcmp(opt, "p2c") == 0) {
    return OPT_SPLIT;
  } else if (strcmp(opt, "p3a") == 0) {
    return OPT_PARKRANGER;
  }

  fprintf(stderr, "error: unexpected command line argument \"%s\"\n", opt);
  print_usage(argv[0]);
  exit(EXIT_FAILURE);
}

// Read integers from stdin, one per line, into a Deque and then return this
// Deque. Integers are inserted at the bottom of the Deque so tha the first
// integer read is the top of the Deque and the final element is the bottom of
// the Deque.
Deque *read_deque() {
  int x;
  Deque *deque = new_deque();

  while (scanf("%d", &x) == 1) {
    deque_insert(deque, (Data) x);
  }

  return deque;
}

// Test a Deque reverse function by reading integers from stdin into a Deque,
// reversing the Deque using the specified function and printing the contents.
// The Deque is freed before this function returns.
void test_reverse(void (*reverse)(Deque *)) {
  Deque *deque = read_deque();
  printf("read %d elements into the deque\n", deque_size(deque));

  printf("original deque: ");
  print_deque(deque);

  reverse(deque);

  printf("reversed deque: ");
  print_deque(deque);

  free_deque(deque);
  printf("successfully freed the deque\n");
}

// Test the split_deque function by reading the critical value k from stdin
// followed by some number of integers (possibly none). These integers are
// inserted at the bottom of the deque, and then split_deque is called. The
// Deque is then printed and freed.
void test_split() {
  // The critical value k
  int k;
  Deque *deque;

  // If we can't read the critical value then the input is invalid.
  if (scanf("%d\n", &k) == 0) {
    exit_with_error("couldn't read critical value");
  }
  printf("read critical value k = %d\n", k);

  deque = read_deque();
  printf("read %d elements into the deque\n", deque_size(deque));

  printf("original deque: ");
  print_deque(deque);

  split_deque(deque, k);

  printf("split deque: ");
  print_deque(deque);

  free_deque(deque);
  printf("successfully freed the deque\n");
}

// Test the is_single_run_possible() function from the parkranger module.
// This function doesn't read anything from stdin, as this is handled by the
// function we are testing. This function will print one of the two options:
//   the trees on the ski slope CAN be trimmed in one run
// or,
//   the trees on the ski slope CANNOT be trimmed in one run
void test_parkranger() {
  bool possible = is_single_run_possible();
  if (possible) {
    printf("the trees on the ski slope CAN be trimmed in one run\n");
  } else {
    printf("the trees on the ski slope CANNOT be trimmed in one run\n");
  }
}
============================================
src/deque.c
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Deque module (i.e., double ended queue) for Assignment 1
 *
 * created for COMP20007 Design of Algorithms 2020
 * template by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * implementation by <Shromann Majumder>
 */

// You must not change any of the code already provided in this file, such as
// type definitions, constants or functions.
//
// You may, however, add additional functions and/or types which you may need
// while implementing your algorithms and data structures.

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include "deque.h"
#include "util.h"

// Create a new empty Deque and return a pointer to it
Deque *new_deque() {
	Deque *deque = malloc(sizeof(*deque));
	assert(deque);

	deque->top = NULL;
	deque->bottom = NULL;
	deque->size = 0;

	return deque;
}

// Free the memory associated with a Deque
void free_deque(Deque *deque) {
  // Remove (and thus free) all of the nodes in the Deque.
  while (deque->size > 0) {
    deque_remove(deque);
  }

	// Free the deque struct itself
	free(deque);
}

// Create a new Node with a given piece of data
Node *new_node(Data data) {
  Node *node = malloc(sizeof(*node));
  assert(node);

  node->next = NULL;
  node->prev = NULL;
  node->data = data;

  return node;
}

// Free the memory associated with a Node
void free_node(Node *node) {
  free(node);
}

// Add an element to the top of a Deque
void deque_push(Deque *deque, Data data) {
  Node *new = new_node(data);

  if (deque->size > 0) {
    new->next = deque->top;
    deque->top->prev = new;
  } else {
    // If the Deque was initially empty then new is both the top and bottom
    deque->bottom = new;
  }

  deque->top = new;
  deque->size++;
}

// Add an element to the bottom of a Deque
void deque_insert(Deque *deque, Data data) {
  Node *new = new_node(data);

  if (deque->size > 0) {
    new->prev = deque->bottom;
    deque->bottom->next = new;
  } else {
    // If the Deque was initially empty then new is both the top and bottom
    deque->top = new;
  }

  deque->bottom = new;
  deque->size++;
}

// Remove and return the top element from a Deque
Data deque_pop(Deque *deque) {
  if (deque->size == 0) {
    exit_with_error("can't pop from empty Deque");
  }

  Data data = deque->top->data;
  Node *old_top = deque->top;

  if (deque->size == 1) {
    deque->top = NULL;
    deque->bottom = NULL;
  } else {
    deque->top = old_top->next;
    deque->top->prev = NULL;
  }

  deque->size--;

  free(old_top);

  return data;
}

// Remove and return the bottom element from a Deque
Data deque_remove(Deque *deque) {
  if (deque->size == 0) {
    exit_with_error("can't remove from empty Deque");
  }

  Data data = deque->bottom->data;
  Node *old_bottom = deque->bottom;

  if (deque->size == 1) {
    deque->top = NULL;
    deque->bottom = NULL;
  } else {
    deque->bottom = old_bottom->prev;
    deque->bottom->next = NULL;
  }

  deque->size--;

  free(old_bottom);

  return data;
}

// Return the number of elements in a Deque
int deque_size(Deque *deque) {
  return deque->size;
}

// Print the Deque on its own line with the following format:
//   [x_1, x_2, ..., x_n]
//     ^              ^
//    top           bottom
void print_deque(Deque *deque) {
  Node *current = deque->top;
  int i = 0;

  printf("[");

  while (current) {
    printf("%d", current->data);
    // Print a comma unless we just printed the final element
    if (i < deque->size - 1) {
      printf(", ");
    }
    current = current->next;
    i++;
  }

  printf("]\n");
}

/*-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_*/

// Reverse the Deque using an iterative approach
void iterative_reverse(Deque *deque) {

  // swap the top and bottom nodes
  Node* node;
  node = deque->top;
  deque->top = deque->bottom;
  deque->bottom = node;

  // // linearly traverse thru the deque and swap the next pointer with the prev pointer. 
  while(node != NULL){
    swap_direction(node);   
    node = node->prev; 
  }
  
}

/*-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_*/

// Reverse the Deque using a recursive approach
void recursive_reverse(Deque *deque) {
  // reverse the bottom with the top node
  deque->bottom = deque->top; 
  // since 'reverse_path' returns the last node of deque, use that
  // to swap with top and bottom of
  deque->top = reverse_path(deque->top);
}


// Split the Deque given a critical value k, such that the Deque contains
// all elements greater than equal to k above (i.e., closer to the top)
// the elements less than k.
//
// Within the two parts of the array (>= k and < k) the elements should
// be in their original order.
//
// This function must run in linear time.

/*-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_*/

void split_deque(Deque *deque, int k) {

  Node* new = deque->top;
  Node* next_node;
  Node* original_bottom = deque->bottom;

  // traverse thru the deque
  while(new != NULL){
    next_node = new->next;

  // if a value < k
    if(new->data < k){

      // take that node out and link up the hole
      if(!new->prev) {
        new->next->prev = NULL;
        deque->top = new->next;
      } else if(!new->next) {
        new->prev->next = NULL;
        deque->bottom = new->prev;
      } else {
        new->prev->next = new->next;
        new->next->prev = new->prev;
      }
      // put the node in the bottom of the deque
      new->next = NULL; 
      new->prev = deque->bottom;
      deque->bottom->next = new; 
      deque->bottom = new; 

    }
    // so the last node is proccessed too 
    if(new == original_bottom){
      break; 
    }
    new = next_node; 
  }
}

// TODO: Add any other functions you might need for your Deque module

// This function swaps the pointer to the next node and with the previous node. 
void swap_direction(Node* node){
  Node* next_node = node->next; 
  node->next = node->prev; 
  node->prev = next_node; 
}

// Reverse the path of the nodes
Node* reverse_path(Node* node) { 

  // if the list is empty, then return NULL 
  if (node == NULL){ 
    return NULL; 
  }

  // if its not empty then, swap the next and the prev pointers
  swap_direction(node);

  // Break Case: when the function is done traversing, return the node
  // which returns the last node of the deque. 
  if(node->prev == NULL){ 
    return node;
  }

  // else continue 
  return reverse_path(node->prev); 
} ============================================
src/util.c
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Functionality used accross the Assignment 1 program
 *
 * created for COMP20007 Design of Algorithms 2020
 * by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * editted by <Shromann Majumder>
 */

#include <stdio.h>
#include <stdlib.h>

#include "util.h"

// Prints an error of the format "error: <error message>" and exits the
// program with a non-zero error code
void exit_with_error(char *error) {
  fprintf(stderr, "error: %s\n", error);
  exit(EXIT_FAILURE);
}

// TODO: Add any more miscelaneous functions required in your program
============================================
src/parkranger.c
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Park Ranger module for Assignment 1
 *
 * created for COMP20007 Design of Algorithms 2020
 * template by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * implementation by <Shromann Majumder>
 */

#include <stdbool.h>
#include <stdio.h>

#include "parkranger.h"
#include "util.h"

// This function must read in a ski slope map and determine whether or not
// it is possible for the park ranger to trim all of the trees on the ski slope
// in a single run starting from the top of the mountain.
//
// The ski slope map is provided via stdin in the following format:
//
//   n m
//   from to
//   from to
//   ...
//   from to
//
// Here n denotes the number of trees that need trimming, which are labelled
// {1, ..., n}. The integer m denotes the number "reachable pairs" of trees.
// There are exactly m lines which follow, each containing a (from, to) pair
// which indicates that tree `to` is directly reachable from tree `from`.
// `from` and `to` are integers in the range {0, ..., n}, where {1, ..., n}
// denote the trees and 0 denotes the top of the mountain.
//
// For example the following input represents a ski slope with 3 trees and
// 4 reachable pairs of trees.
//
// input:            map:          0
//   3 4                          / \
//   0 1                         /  2
//   0 2                        / /
//   2 1                        1
//   1 3                          \
//                                 3
//
// In this example your program should return `true` as there is a way to trim
// all trees in a single run. This run is (0, 2, 1, 3).
//
// Your function should must:
//  - Read in this data from stdin
//  - Store this data in an appropriate data structure
//  - Run the algorithm you have designed to solve this problem
//  - Do any clean up required (e.g., free allocated memory)
//  - Return `true` or `false` (included in the stdbool.h library)
//
// For full marks your algorithm must run in O(n + m) time.
bool is_single_run_possible() {

    int n, m; 
    int u, v;
    int* path;
    

    get_values(&n, &m);                       // Get the n and m values from the text input

    graph_t *forest = create_graph(n);        // Create a graph of n + 1 size (incl. mountain)
    while(get_values(&u, &v)){
        append(forest, u, v);                 // Store the data in the adjacency list 
    }

    path = FindPath(forest);    
    return isSinglePath(forest, path);        // Finally, return the path is continious and output accordingly
    
}

// TODO: Add any additional functions or types required to solve this problem.
struct node {
    int vertex;
    node_t *next;
};

struct graph {
    int vertex_count;
    node_t **list;
};


int get_values(int *x, int *y){
    return scanf("%d %d\n", x, y) != EOF;
}

node_t* create_node(int v){
    node_t *new = (node_t *)malloc(sizeof(node_t*));
    new->vertex = v;
    new->next = NULL;
    return new;
}

graph_t* create_graph(int vertices){
    vertices++; // we increase the vertices by one to include the mountain node. 
    graph_t* graph = (graph_t*)malloc(sizeof(graph_t*));
    graph->vertex_count = vertices;
    graph->list = malloc(vertices * sizeof(struct node*));
 
    int i;
    for (i = 0; i < vertices; i++)
        graph->list[i] = NULL;
 
    return graph;
}

void append(graph_t* graph, int u, int v){
    node_t* new = create_node(v);
    new->next = graph->list[u];
    graph->list[u] = new;
}


int* create_list(int size){
    int* visited = (int*)malloc(size * sizeof(int));
    int i;
    for(i = 0; i < size; i++){
        visited[i] = false; 
    }
    return visited; 
}

int* FindPath(graph_t* graph){
    int* visited = create_list(graph->vertex_count);
    int* path = create_list(graph->vertex_count);
    int n = graph->vertex_count - 1;
    
    int v;  
    for(v = 0; v < graph->vertex_count; v++){
        if(!visited[v]){
            n = dfsFindPath(graph, v, visited, path, n);
        }
    }
    
    return path; 
}

int dfsFindPath(graph_t* graph, int v, int* visited_list, int* path, int n){

    //-- dfs : 

    visited_list[v] = true; 
    // printf("visiting: %d\n", v);
    
    node_t *child = graph->list[v];
    while(child != NULL){
        if(!visited_list[child->vertex]){
            // printf("%d -> %d\n", v, child->vertex);
            n = dfsFindPath(graph, child->vertex, visited_list, path, n);
        }
        child = child->next;
    }

    //-- FindPath:
    path[n] = v;
    return n-1;
}

bool isSinglePath(graph_t* graph, int* path){ 
    node_t *node;
    bool continous = false;
    int i; 
    for(i = 0; i < ((graph->vertex_count)-1); i++){

        node = graph->list[path[i]];
        continous = false;

        while (node != NULL){
            if(path[i+1] == node->vertex){
                continous = true;
                break;
            }
            node = node->next;
        }

        if(!continous){
            return false; 
        } 
    }
    return continous; 
}


============================================
src/util.h
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Functionality used accross the Assignment 1 program
 *
 * created for COMP20007 Design of Algorithms 2020
 * by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * editted by <Shromann Majumder>
 */

#ifndef UTIL_H
#define UTIL_H

// Prints an error of the format "error: <error message>" and exits the
// program with a non-zero error code
void exit_with_error(char *error);

// TODO: Add any more miscelaneous functions required in your program
#include "stdlib.h"


#endif
============================================
src/test.c
23:54:47_Tuesday_28_April_2020
============================================
============================================
src/Makefile
23:54:47_Tuesday_28_April_2020
============================================
# Makefile for Assignment 1
#
# created for COMP20007 Design of Algorithms 2020
# written by Tobias Edwards <tobias.edwards@unimelb.edu.au>
# changes by <Insert Name Here>

# The compiler flags used when compiling
CFLAGS=-Wall -Wno-comment

a1: main.o deque.o parkranger.o util.o
	gcc $(CFLAGS) -o a1 main.o deque.o parkranger.o util.o

main.o: main.c deque.h util.h
	gcc $(CFLAGS) -c main.c

deque.o: deque.c deque.h util.h
	gcc $(CFLAGS) -c deque.c

parkranger.o: parkranger.c parkranger.h util.h
	gcc $(CFLAGS) -c parkranger.c

util.o: util.c util.h
	gcc $(CFLAGS) -c util.c

# Add or update any of these rules to include additional files/modules you may
# include. You can add additional compiler flags as well, however you should
# not remove the -Wall flag.

# This .PHONY command declares the "clean" rule as a phony one, i.e., it means
# that the clean rule will run instructions but it wont create a file called
# "clean" like a normal rule would (e.g., the util.o rule results in a file
# called util.o being created).
.PHONY: clean

clean:
	rm *.o
	rm a1
============================================
src/deque.h
23:54:47_Tuesday_28_April_2020
============================================
/* * * * * * *
 * Deque module (i.e., double ended queue) for Assignment 1
 *
 * created for COMP20007 Design of Algorithms 2020
 * template by Tobias Edwards <tobias.edwards@unimelb.edu.au>
 * implementation by <Shromann Majumder>
 */

// You must not change any of the code already provided in this file, such as
// type definitions, constants or functions.
//
// You may, however, add additional functions and/or types which you may need
// while implementing your algorithms and data structures.

#ifndef DEQUE_H
#define DEQUE_H

// DO NOT CHANGE THESE TYPE DEFINITIONS

// The data type that our Deque will contain
typedef int Data;

// Our Deque is implemented using a doubly-linked list
typedef struct deque Deque;

// The Nodes which make up the doubly-linked list
typedef struct node Node;

struct deque {
  Node *top;
  Node *bottom;
  int size;
};

struct node {
  Node *next;
  Node *prev;
  Data data;
};

// Create a new empty Deque and return a pointer to it
Deque *new_deque();

// Free the memory associated with a Deque
void free_deque(Deque *deque);

// Create a new Node with a given piece of data
Node *new_node(Data data);

// Free the memory associated with a Node
void free_node(Node *node);

// Add an element to the top of a Deque
void deque_push(Deque *deque, Data data);

// Add an element to the bottom of a Deque
void deque_insert(Deque *deque, Data data);

// Remove and return the top element from a Deque
Data deque_pop(Deque *deque);

// Remove and return the bottom element from a Deque
Data deque_remove(Deque *deque);

// Return the number of elements in a Deque
int deque_size(Deque *deque);

// Print the Deque on its own line with the following format:
//   [x_1, x_2, ..., x_n]
//     ^              ^
//    top           bottom
void print_deque(Deque *deque);

// Reverse the Deque using an iterative approach
void iterative_reverse(Deque *deque);

// Reverse the Deque using a recursive approach
void recursive_reverse(Deque *deque);

// Split the Deque given a critical value k, such that the Deque contains
// all elements greater than equal to k above (i.e., closer to the top)
// the elements less than k.
//
// Within the two parts of the array (>= k and < k) the elements should
// be in their original order.
//
// This function must run in linear time.
void split_deque(Deque *deque, int k);

// TODO: Add any other functions you might need for your Deque module

// This function swaps the pointer to the next node and with the previous node. 
void swap_direction(Node* node);

// reverses the dierection of all nodes dierection using recursion
Node* reverse_path(Node* node); 


#endif
